hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
#summary(hd.fit)
#length(hd2$sex)  # after    434  --> hd.fit
#length(hd$sex)    # before 437   --> hd.fit.outliers
layout(matrix(1:4,2,2))
plot(hd.fit)                 # plot the new data
plot(hd.fit.outliers)       # plot the old data
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
main=  'forklength vs.interorbital',
sub=   'Outliers denoted by filled circles',
ylab=  'fork length',
xlab=  'interorbital',
pch=   16+keephd)
abline(hd.fit)
png("C:/github/headresults/figures/Figure1.png")  # write png to folder
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu**")")) +
xlab('Fork length (cm)') +
geom_point() #+
#geom_text(aes(label=SPECIMEN_ID),hjust=0, vjust=0)
#prelimplothd
#  ---step003a--Fit the regression line and get the results on regular data including outliers(hd)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
#summary(hd.fit)
#length(hd2$sex)  # after    434  --> hd.fit
#length(hd$sex)    # before 437   --> hd.fit.outliers
#layout(matrix(1:4,2,2))
#plot(hd.fit)                 # plot the new data
#plot(hd.fit.outliers)       # plot the old data
# plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#     main=  'forklength vs.interorbital',
#      sub=   'Outliers denoted by filled circles',
#     ylab=  'fork length',
#      xlab=  'interorbital',
#      pch=   16+keephd)
#      abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
#hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
while (!is.null(dev.list()))  dev.off()
img                <-  paste('C:/github/headresults/figures/Figure1.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
png("C:/github/headresults/figures/Figure1.png")  # write png to folder
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
#ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu**)")")) +
png("C:/github/headresults/figures/Figure1.png")  # write png to folder
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
#ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu** ")")) +
xlab('Fork length (cm)') +
geom_point() #+
#geom_text(aes(label=SPECIMEN_ID),hjust=0, vjust=0)
#prelimplothd
#  ---step003a--Fit the regression line and get the results on regular data including outliers(hd)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
#summary(hd.fit)
#length(hd2$sex)  # after    434  --> hd.fit
#length(hd$sex)    # before 437   --> hd.fit.outliers
#layout(matrix(1:4,2,2))
#plot(hd.fit)                 # plot the new data
#plot(hd.fit.outliers)       # plot the old data
# plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#     main=  'forklength vs.interorbital',
#      sub=   'Outliers denoted by filled circles',
#     ylab=  'fork length',
#      xlab=  'interorbital',
#      pch=   16+keephd)
#      abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
#hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
while (!is.null(dev.list()))  dev.off()
img                <-  paste('C:/github/headresults/figures/Figure1.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
png("C:/github/headresults/figures/Figure1.png")  # write png to folder
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
#ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu*")")) +
xlab('Fork length (cm)') +
geom_point() #+
#geom_text(aes(label=SPECIMEN_ID),hjust=0, vjust=0)
#prelimplothd
#  ---step003a--Fit the regression line and get the results on regular data including outliers(hd)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
#summary(hd.fit)
#length(hd2$sex)  # after    434  --> hd.fit
#length(hd$sex)    # before 437   --> hd.fit.outliers
#layout(matrix(1:4,2,2))
#plot(hd.fit)                 # plot the new data
#plot(hd.fit.outliers)       # plot the old data
# plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#     main=  'forklength vs.interorbital',
#      sub=   'Outliers denoted by filled circles',
#     ylab=  'fork length',
#      xlab=  'interorbital',
#      pch=   16+keephd)
#      abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
#hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
while (!is.null(dev.list()))  dev.off()
img                <-  paste('C:/github/headresults/figures/Figure1.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
png("C:/github/headresults/figures/Figure1.png")  # write png to folder
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
#ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu*"m)")) +
xlab('Fork length (cm)') +
geom_point() #+
#geom_text(aes(label=SPECIMEN_ID),hjust=0, vjust=0)
#prelimplothd
#  ---step003a--Fit the regression line and get the results on regular data including outliers(hd)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
# diagplothd                                   # Regression diagnostic plots
# plot(residuals(hd.fit.outliers))              # plot the residuals
# abline(h=0)
keephd <- abs(residuals(hd.fit.outliers))<100
hd2    <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
#summary(hd.fit)
#length(hd2$sex)  # after    434  --> hd.fit
#length(hd$sex)    # before 437   --> hd.fit.outliers
#layout(matrix(1:4,2,2))
#plot(hd.fit)                 # plot the new data
#plot(hd.fit.outliers)       # plot the old data
# plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#     main=  'forklength vs.interorbital',
#      sub=   'Outliers denoted by filled circles',
#     ylab=  'fork length',
#      xlab=  'interorbital',
#      pch=   16+keephd)
#      abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
#hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
while (!is.null(dev.list()))  dev.off()
img                <-  paste('C:/github/headresults/figures/Figure1.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
head        <- paste("select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance ",
"from Head_Measurements where InterOrbital_Distance is not null ", sep="")
hd          <- GetSQLData(head,"Sablefish")      # read from sql server and store in csv
# ---step002-- Scatter plot the raw data  # par(mfrow=c(1,2))
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm), label=SPECIMEN_ID)+
#ggtitle('Fork Length vs. Interorbital') +
ylab(expression("Interorbital length"~"("*mu*"m)")) +
xlab('Fork length (cm)') +
geom_point() #+
#geom_text(aes(label=SPECIMEN_ID),hjust=0, vjust=0)
#prelimplothd
#  ---step003a--Fit the regression line and get the results on regular data including outliers(hd)
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
#summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
diagplothd
source('C:/github/headresults/03b_figures_bak.R')
options(useFancyQuotes=FALSE) # renders summary output corrects
library(ggfortify)
library(ggplot2)
# Read in the data
library("RODBC")
GetSQLData <- function(strSQL,strDbName) {    # connect to SQL Server
cnn <- odbcDriverConnect(paste("Driver={SQL Server};Server=DFBCV9TWVASP001;",
"Database=",strDbName,";Trusted_Connection=Yes",sep=""))
dat <- sqlQuery(cnn, strSQL)
odbcClose(cnn)
return(dat)
}
# Sablefish.dbo.procR_Survey_Sablefish_LenWt_shiny queries table GFBIO_SABLEBIO_VW for survey InterOrbital_Distance data
head       <- "select SPECIMEN_ID, sex, FORKLENGTHcm, Round_Weightg, InterOrbital_Distance from Head_Measurements  where InterOrbital_Distance is not null "
#hd         <- GetSQLData(head,"Sablefish")
#write.table(hd , file = paste("C:/DATA/ADMIN/StatsRefresher/Datasets/Reg/Mercury/","hd.csv",sep=''),row.names=FALSE, na="",col.names=TRUE, sep=",")
hd   <- read.csv("C:/DATA/ADMIN/StatsRefresher/Datasets/Reg/Mercury/hd.csv")
# Plot the raw data
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
ggtitle('Fork Length vs. Interorbital')+
ylab('Interorbital')+xlab('Fork Length')+
geom_point()
prelimplothd
# Fit the regression line and get the results
##---part003b;
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
diagplothd
plot(residuals(hd.fit.outliers))
abline(h=0)
# Remove the outliers and refit the line
# Fit the regression line and get the results
##---part003ab;
keephd <- abs(residuals(hd.fit.outliers))<100
hd2 <- hd[keephd,]
hd.fit <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd.fit)
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
main='forklength vs.interorbital',
sub='Outliers denoted by filled circles',
ylab='fork length',
xlab='interorbital',
pch=16+keephd)
abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
# Extract the coefficients and find a confidence interval for them
##---part004b;
confint(hd.fit)
##---part004e;
# Make predictions at new values of X for the mean and individual------------------------------------------------------------------------------------------
##---part005b;
myhd.data <- data.frame( InterOrbital_Distance=c(72.6,55.8,40.0), id=c(1,2,3))
cat('Confidence intervals for the MEAN response\n')
myhd.pred.mean <- predict(hd.fit, newdata=myhd.data,  se.fit=TRUE, interval="confidence")
cbind(interorbhd=myhd.data$InterOrbital_Distance,    myhd.pred.mean$fit,    se=myhd.pred.mean$se.fit)
cat('Confidence intervals for the INDIVIDUAL response\n',
'Note that se for predictions are NOT computed\n')
myhd.pred.indiv <- predict(hd.fit, newdata=myhd.data,    interval="prediction")
cbind(interorbhdind=myhd.data$id, myhd.data$InterOrbital_Distance,    myhd.pred.indiv)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##---part005e;
# draw a plot with the fitted lines and the various confidence intervals
myhd.pred.mean<- predict(hd.fit, newdata=hd,   interval='confidence')
myhd.pred.indiv <- predict(hd.fit, newdata=hd,   interval='prediction')
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
main='Fork length vs. interorbital')
abline(hd.fit)                                                            # notice use the object
# We need to sort by the intake values to get nice plots
lines(hd$InterOrbital_Distance[order(hd$InterOrbital_Distance)], myhd.pred.mean[order(hd$InterOrbital_Distance),"lwr"], lty=2, col="red")
lines(hd$InterOrbital_Distance[order(hd$InterOrbital_Distance)], myhd.pred.mean[order(hd$InterOrbital_Distance),"upr"], lty=2, col="red")
lines(hd$InterOrbital_Distance[order(hd$InterOrbital_Distance)], myhd.pred.indiv[order(hd$InterOrbital_Distance),"lwr"],lty=3)
lines(hd$InterOrbital_Distance[order(hd$InterOrbital_Distance)], myhd.pred.indiv[order(hd$InterOrbital_Distance),"upr"],lty=3)
##---part006e;
dev.off()
#  get residual and other diagnostic plot
diagplothd <- autoplot(hd.fit)
diagplothd
#  1.    When conducting a residual analysis, a "residuals versus fits plot" is the most frequently created plot.
#          It is a scatter plot of residuals on the y axis and fitted values (estimated responses) on the x axis.
#          The plot is used to detect non-linearity, unequal error variances, and outliers.
#   2.   A Q-Q plot is a scatterplot created by plotting two sets of quantiles against one another.
#         If both sets of quantiles came from the same distribution, we should see the points forming a line that’s roughly straight.
#   3.  Spread-Location plot. This plot shows if residuals are spread equally along the ranges of predictors. This is how you can
#           check the assumption of equal variance (homoscedasticity). It’s good if you see a horizontal line with equally (randomly) spread points.
#   4.  Residuals vs Leverage.  This plot helps us to find influential cases (i.e., subjects) if any. Not all outliers are influential in linear regression
#             analysis (whatever outliers mean). Even though data have extreme values, they might not be influential to determine a regression line.
#             That means, the results wouldn’t be much different if we either include or exclude them from analysis.
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
ggtitle('Fork Length vs. Interorbital')+
ylab('Interorbital')+xlab('Fork Length')+
geom_point()
prelimplothd
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
ggtitle('Fork Length vs. Interorbital')+
ylab('Interorbital')+xlab('Fork Length')+
geom_point()  + geom_smooth(method="lm", se=FALSE)
prelimplothd
# Plot the raw data
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
#ggtitle('Fork Length vs. Interorbital')+
ylab(expression("Interorbital length"~"("*mu*"m)")) +
xlab('Fork length (cm)') +
geom_point()  + geom_smooth(method="lm", se=FALSE)
prelimplothd
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
diagplothd
plot(residuals(hd.fit.outliers))
abline(h=0)
# Plot the raw data
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
#ggtitle('Fork Length vs. Interorbital')+
ylab(expression("Interorbital length"~"("*mu*"m)")) +
xlab('Fork length (cm)') +
geom_smooth(method="lm", se=FALSE) +
geom_point()
# Plot the raw data
prelimplothd <-ggplot(data=hd, aes(x=InterOrbital_Distance, y=FORKLENGTHcm))+
#ggtitle('Fork Length vs. Interorbital')+
ylab(expression("Interorbital length"~"("*mu*"m)")) +
xlab('Fork length (cm)') +
geom_smooth(method="lm", se=FALSE) +
geom_point()
prelimplothd
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
diagplothd
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+
keephd)
abline(hd.fit)
keephd   <- abs(residuals(hd.fit.outliers))<100   # keep those values on index <100
hd2          <- hd[keephd,]
hd.fit       <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd.fit)   # new summary bases on new lines
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
# Extract the coefficients and find a confidence interval for them
confint(hd.fit)
# Make predictions at new values of X for the mean and individual------------------------------------------------------------------------------------------
##---part005b;
myhd.data <- data.frame( InterOrbital_Distance=c(72.6,55.8,40.0), id=c(1,2,3))
cat('Confidence intervals for the MEAN response\n')
myhd.pred.mean <- predict(hd.fit, newdata=myhd.data,  se.fit=TRUE, interval="confidence")
cbind(interorbhd=myhd.data$InterOrbital_Distance,    myhd.pred.mean$fit,    se=myhd.pred.mean$se.fit)
cat('Confidence intervals for the INDIVIDUAL response\n',
'Note that se for predictions are NOT computed\n')
myhd.pred.indiv <- predict(hd.fit, newdata=myhd.data,    interval="prediction")
cbind(interorbhdind=myhd.data$id, myhd.data$InterOrbital_Distance,    myhd.pred.indiv)
# ---  Remove the outliers and refit the line
keephd   <- abs(residuals(hd.fit.outliers))<100   # keep those values on index <100
hd2          <- hd[keephd,]
hd2.fit       <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd2.fit)   # new summary bases on new lines
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
# ---  Remove the outliers and refit the line
keephd   <- abs(residuals(hd.fit.outliers))<100   # keep those values on index <100
hd2          <- hd[keephd,]
hd.fit       <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd.fit)   # new summary bases on new lines
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
abline(hd.fit)
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
keephd
# ---  Remove the outliers and refit the line---------------------------------------------------------------------------------------------------------------------------------------------------------
keephd   <- abs(residuals(hd.fit.outliers))<100   # keep those values on index <100
hd2          <- hd[keephd,]
hd.fit       <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd.fit)   # new summary bases on new lines
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
abline(hd2.fit)
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
# Extract the coefficients and find a confidence interval for them
confint(hd.fit)
# ---- Fit the regression line and get the results for the RAW data
hd.fit.outliers <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd)
options("scipen"=100, "digits"=12)
summary(hd.fit.outliers)
diagplothd <- autoplot(hd.fit.outliers)
diagplothd     #--- 4 plots to review
plot(residuals(hd.fit.outliers))
abline(h=0)    #-- index plot looking for those >100
keephd
diagplothd <- autoplot(hd.fit.outliers)
diagplothd     #--- 4 plots to review
diagplothd
plot(residuals(hd.fit.outliers))
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
diagplothd
plot(residuals(hd.fit.outliers))
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
diagplothd
plot(residuals(hd.fit.outliers))
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
# ---  Remove the outliers and refit the line---------------------------------------------------------------------------------------------------------------------------------------------------------
keephd   <- abs(residuals(hd.fit.outliers))<100   # keep those values on index <100
hd2          <- hd[keephd,]
hd.fit       <- lm(FORKLENGTHcm ~ InterOrbital_Distance, data=hd2)
summary(hd.fit)   # new summary bases on new lines
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)')
)
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16+ keephd)
keephd
plot(hd$InterOrbital_Distance, hd$FORKLENGTHcm,
#main='forklength vs.interorbital',
#sub='Outliers denoted by filled circles',
ylab=(expression("Interorbital length"~"("*mu*"m)")) ,
xlab=('Fork length (cm)') ,
pch=16)
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
hddiagplot <- autoplot(hd.fit.outliers)
hddiagplot
hdfitplot <- prelimplothd + geom_smooth(method="lm", se=FALSE)
hdfitplot
devtools::install_github("goodekat/ggResidpanel")
plot(residuals(hd.fit.outliers), which=1, ylab="Residuals")
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
plot(residuals(hd.fit.outliers, ylab="Residuals")
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
plot(residuals(hd.fit.outliers), ylab="Residuals")
abline(h=0)    #-- one of the 4 plots = residuals vs index plot looking for those >100
hd.fit.outliers
