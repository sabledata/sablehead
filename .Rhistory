pointdata    <-read.csv(here("standalone", "figure1.csv"))
library(here)
library(rgdal)
library(ggfortify)
png("C:/github/sablehead/figures/Figure1.png", units="px", width=1600, height=1800, res=150) # write png to file
sql          <-   "select * from Head_Measurements_Report where SLAT > 0"  # head measurement data
#pointdata    <-   GetSQLData(sql,"Sablefish")   # retrieve from seamount database
#write.table(pointdata, file = paste(path,"figure1.csv",sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
#pointdata    <-  read.csv(paste(path,'figure1.csv',sep=''),header=T)  # read from csv
#K.Holt: changed point data to use here function when reading
#pointdata    <-read.csv(here("standalone", "figure1.csv"))
pointdata    <-  read.csv(paste(path,'figure1.csv',sep=''),header=T)  # read from csv
lon          <-   data.frame(pointdata$SLAT)
lat          <-   data.frame(pointdata$SLON)
spid         <-   data.frame(pointdata$SPECIMEN_ID)
trip         <-   data.frame(pointdata$TRIP_ID)
df           <-   as.data.frame(cbind(lon,lat,spid,trip))   # add year, lat, long, specimen_id to dataframe
# add pilot survey coordinates for general fishing area
a <- c(46.7093,-130.82812, 1, 338773 ) #  cobb
b <- c(48.2828,-133.204, 2, 338773 )    #   eickelburg
df           <-  rbind(df,a)
df           <-  rbind(df,b)
df           <-  df[df$pointdata.TRIP_ID !=0,]
canada       <-   readOGR(dsn = "C:/github/sablehead/storage",layer ="awscntry_geo", verbose = FALSE)  # open shapefile
shapef_can   <-   fortify(canada)    # fortify for ggplot require.
points_df    <-   fortify(df)
seamounts    <-   readOGR(dsn = "C:/github/sablehead/storage",layer ="twoSeamounts_geo", verbose = FALSE)  # open shapefile
seam_can     <-   fortify(seamounts)    # fortify for ggplot require.
map          <-  ggplot() +
geom_polygon(data = shapef_can,
aes(x = long, y = lat, group = group),
fill="gray40",
size = .2) +
geom_polygon(data = seam_can, aes(x = long, y =  lat, group = group),
color = "lightgray", alpha = 0, linetype = 1)  +
geom_point(data =   points_df, aes(pointdata.SLON, pointdata.SLAT,
fill=factor(pointdata.TRIP_ID),  size=0.7) ,
colour="lightgray", shape=21, size=5) +
geom_text(aes(x =  -130.000, y = 46.7093, label = "Cobb"),
alpha = 1,
color = "grey40")  +
geom_text(aes(x =  -131.6040, y = 48.2828, label = "Eickelberg"),
alpha = 1,
color = "grey40")  +
theme_minimal()    +
guides(fill="none") +
guides(size="none") +
guides(fill=guide_legend(title="Trip")) +
xlab("Longitude") + ylab("Latitude") +
theme(  text = element_text(size=20),
plot.title      = element_blank(),
legend.position = c(.29, 0.45),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6)
)
map_projected  <- map +   # reproject to make it look better
coord_map()  +
annotation_north_arrow(location = "bl", which_north = "true",  # north arrow
pad_x  = unit(1.0, "cm"),
pad_y  = unit(2.5,  "cm"),
height = unit(2.5,  "cm"),
width  = unit(2.5,  "cm"),
style  = north_arrow_fancy_orienteering)
map_projected        +
annotation_scale(location = "bl",
pad_x = unit(0.5, "in"),
pad_y = unit(0.3, "in"),
height = unit(0.5, "cm"),
width  = unit(5.95,"cm"),
text_cex = 1.0)   +
coord_sf(crs = 4326)  +
scale_fill_discrete(name = "Research Trip",
labels = c("WCVI", "WCHG","Seamount Pilot"))
while (!is.null(dev.list()))  dev.off()
img <-   paste('C:/github/sablehead/figures/Figure1.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
png("C:/github/sablehead/figures/Figure2.png", units="px", width=2300, height=2700, res=500) # write png to file
library(viridis)
cranial       <- rbind(cranial.uj,cranial.ed, cranial.id)  # facet wrap all 5 cranial measurements
png("C:/github/sablehead/figures/Figure2.png", units="px",
width=2300, height=2700, res=500) # write png to file
library(viridis)
cranial       <- rbind(cranial.uj,cranial.ed, cranial.id)  # facet wrap all 5 cranial measurements
#  fit the regression lines and get the prediction results separately for male, female and head measurements
#  before putting in ggplot - very necessary
cranial.f                     <-  hdUj[hdUj$SPECIMEN_SEX_DESC=="FEMALE",]  # Upper jaw  length data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)                   # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ Upper_jaw_length, data=cranial.f)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)                 # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdUj[hdUj$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ Upper_jaw_length, data=cranial.m)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)                 # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.uj  <-  rbind( cranial.f, cranial.m )
names(cranial.uj)[6] <- "hlength"
cranial.f                     <-  hdEd[hdEd$SPECIMEN_SEX_DESC=="FEMALE",]  # Eye Diameter length data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)                   # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ Eye_Diameter, data=cranial.f)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)                 # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdEd[hdEd$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ Eye_Diameter, data=cranial.m)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)                 # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.ed  <-  rbind( cranial.f, cranial.m )
names(cranial.ed)[6] <- "hlength"
cranial.f                     <-  hdId[hdId$SPECIMEN_SEX_DESC=="FEMALE",]  # InterOrbital distance data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)                   # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ InterOrbital_Distance, data=cranial.f)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)                 # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdId[hdId$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ InterOrbital_Distance, data=cranial.m)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)                 # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.id  <-  rbind( cranial.f, cranial.m )
names(cranial.id)[6] <- "hlength"
cranial.f                     <-  hdSl[hdSl$SPECIMEN_SEX_DESC=="FEMALE",]         # Snout length data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)                   # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ Snout_length, data=cranial.f)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)                 # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdSl[hdSl$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ Snout_length, data=cranial.m)  # linear regression model
#plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)                 # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.sl <-  rbind( cranial.f, cranial.m )
names(cranial.sl)[6] <- "hlength"
cranial.f                     <-  hdPop[hdPop$SPECIMEN_SEX_DESC=="FEMALE",]  # Postorbital_Preoperculum length data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)              # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ Postorbital_Preoperculum, data=cranial.f)  # linear regression model #plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)         # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdPop[hdPop$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ Postorbital_Preoperculum, data=cranial.m)  # linear regression model #plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)         # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.pp <-  rbind( cranial.f, cranial.m )
names(cranial.pp)[6] <- "hlength"
cranial.f                     <-  hdPo[hdPo$SPECIMEN_SEX_DESC=="FEMALE",]  # Post orbital Head length data
cranial.f$n                   <-  length(cranial.f$HeadBarcode)              # number of specimens
cranial.fit.outliers.f        <-  lm(Fork_Length ~ Post_orbital_Head_length, data=cranial.f)  # linear regression model #plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.f  <-  summary(cranial.fit.outliers.f)         # summary
cranial.f$predicted           <-  predict(cranial.fit.outliers.f)   # save the predicted values
cranial.f$residuals           <-  residuals(cranial.fit.outliers.f) # save the residual values
cranial.m                     <-  hdPo[hdPo$SPECIMEN_SEX_DESC=="MALE",]  # snout length data
cranial.m$n                   <-  length(cranial.m$HeadBarcode)                   # number of specimens
cranial.fit.outliers.m        <-  lm(Fork_Length ~ Post_orbital_Head_length, data=cranial.m)  # linear regression model #plot(hd.fit.outliers, which = 1, pch=21)
cranial.fit.outliersummary.m  <-  summary(cranial.fit.outliers.m)         # summary
cranial.m$predicted           <-  predict(cranial.fit.outliers.m)   # save the predicted values
cranial.m$residuals           <-  residuals(cranial.fit.outliers.m) # save the residual values
cranial.po <-  rbind( cranial.f, cranial.m )
names(cranial.po)[6] <- "hlength"
png("C:/github/sablehead/figures/Figure2.png", units="px",
width=2300, height=2700, res=500) # write png to file
library(viridis)
cranial       <- rbind(cranial.uj,cranial.ed, cranial.id)  # facet wrap all 5 cranial measurements
cranial$facet <- factor(cranial$measure, levels = c("UJ", "ED", "ID"))
ggplot(cranial, aes(x = hlength, y = Fork_Length)) +
scale_y_continuous(limits = c(200, 1200)) +
ylab('Fork length (mm)') +
xlab("Cranial dimension (mm)") +
geom_smooth(method = "lm",se = FALSE,color = "grey") +                          # plot regression slope
geom_segment(aes(xend = hlength, yend = predicted), color= "black", size=0.15, alpha = .35) +  # lines
# color residuals https://drsimonj.svbtle.com/visualising-residuals
geom_point(aes(color = abs(residuals), size = abs(residuals))) +                # residuals
scale_size(range=c(0.1,0.9)) +
scale_color_gradient2(low = "grey", mid = "#1ebecd", high = "orange")  +
guides( size = FALSE) +
geom_point(aes(y = predicted), shape = 20, size=0.25)     +    # plot predicted circles
stat_regline_equation(label.x=85, label.y=450, aes(label = ..eq.label..), size=2.1,
label.x.npc = "right",
label.y.npc = "bottom") +   # y = mx+b and r2 values added to plot
stat_regline_equation(label.x=85, label.y = 350,  aes(label = ..rr.label..), size=2.1,
label.x.npc = "right",
label.y.npc = "bottom") +  # r square value
stat_cor( aes(label = paste(
if_else(readr::parse_number(..p.label..) < 0.001,    # p value
"p<0.001", ..p.label..), sep = "~`,   `~")),
label.x=85,
label.y = 250, size=2.1,
label.x.npc = "right",
label.y.npc = "bottom")  +
geom_text(size=2.0, aes(x=20,y=1140,label= paste0("n=",n)))  +
facet_grid( facet ~ SPECIMEN_SEX_DESC) +   # facet wrap
theme(legend.position=c(0.87,0.56),legend.key.size = unit(1.4, 'mm'),    # legend position
legend.text=element_text(size=6), legend.title = element_text(size=6)) +
theme(legend.box = 'horizontal')  +
labs(color="residuals") +
theme(strip.text.x = element_text(size=7),
strip.text.y = element_text(size=7),
strip.background = element_rect(size=0.25,colour="black", fill="lightgray")) +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.25)) +
theme(axis.title.y = element_text(size = 7), axis.title.x = element_text(size = 7) ) +
theme(axis.text = element_text(size = 6)) +
theme(panel.background = element_rect(fill = "white",
colour = "white",
size = 0.35, linetype = "solid"),  # control the grey lines
panel.grid.major = element_line(size = 0.125, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.125, linetype = 'solid',
colour = "grey"))
while (!is.null(dev.list()))  dev.off()
img <-   paste('C:/github/sablehead/figures/figure2.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
png("C:/github/sablehead/figures/Figure3.png", units="px", width=2300, height=2700, res=500) # write png to file
cranial <- rbind(cranial.sl, cranial.pp, cranial.po)  # facet wrap all 3 cranial measurements
cranial$facet = factor(cranial$measure, levels = c("SL","PP","PO"))
ggplot(cranial, aes(x = hlength, y = Fork_Length)) +
scale_y_continuous(limits = c(200, 1200)) +
ylab('Fork length (mm)') +
xlab("Cranial dimension (mm)") +
geom_smooth(method = "lm",se = FALSE,color = "grey") +                          # plot regression slope
geom_segment(aes(xend = hlength, yend = predicted), color= "black", size=0.15, alpha = .35) +  # lines
# color residuals https://drsimonj.svbtle.com/visualising-residuals
geom_point(aes(color = abs(residuals), size = abs(residuals))) +                # residuals
scale_size(range=c(0.1,0.9)) +
scale_color_gradient2(low = "grey", mid = "#1ebecd", high = "orange")  +
guides( size = FALSE) +
geom_point(aes(y = predicted), shape = 20, size=0.25)     +    # plot predicted circles
stat_regline_equation(label.x=100, label.y=450, aes(label = ..eq.label..), size=2.1,
label.x.npc = "right",
label.y.npc = "bottom") +   # y = mx+b and r2 values added to plot
stat_regline_equation(label.x=100, label.y = 350,  aes(label = ..rr.label..), size=2.1,
label.x.npc = "right",
label.y.npc = "bottom") +  # r square value
stat_cor( aes(label = paste(
if_else(readr::parse_number(..p.label..) < 0.001,    # p value
"p<0.001", ..p.label..), sep = "~`,   `~")),
label.x=100,
label.y = 250, size=2.1,
label.x.npc = "right",
label.y.npc = "bottom")  +
geom_text(size=2.0, aes(x=20,y=1140,label= paste0("n=",n)))  +
facet_grid( facet ~ SPECIMEN_SEX_DESC) +   # facet wrap
theme(legend.position=c(0.87,0.56),legend.key.size = unit(1.4, 'mm'),    # legend position
legend.text=element_text(size=6), legend.title = element_text(size=6)) +
theme(legend.box = 'horizontal')  +
labs(color="residuals") +
theme(strip.text.x = element_text(size=7),
strip.text.y = element_text(size=7),
strip.background = element_rect(size=0.25,colour="black", fill="lightgray")) +
theme(panel.border = element_rect(color = "black",
fill = NA,
size = 0.25)) +
theme(axis.title.y = element_text(size = 7), axis.title.x = element_text(size = 7) ) +
theme(axis.text = element_text(size = 6)) +
theme(panel.background = element_rect(fill = "white",
colour = "white",
size = 0.35, linetype = "solid"),  # control the grey lines
panel.grid.major = element_line(size = 0.125, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.125, linetype = 'solid',
colour = "grey"))
while (!is.null(dev.list()))  dev.off()
img <-   paste('C:/github/sablehead/figures/figure3.png',sep="")   # -- retrieve png
knitr::include_graphics(img)
options(knitr.kable.NA = '')
df   <-  read.csv(paste(path,"Table1.csv", sep=""), header=T)
df$symbol  <-  c(paste("L", "\\textsubscript{UJ}", sep=''),
paste("L", "\\textsubscript{ED}", sep=''),
paste("L", "\\textsubscript{ID}", sep=''),
paste("L", "\\textsubscript{SL}", sep=''),
paste("L", "\\textsubscript{PP}", sep=''),
paste("L", "\\textsubscript{PO}", sep=''))
df$Head.dimension  <- NULL
df  <- df[,c(3,1,2)]
names(df)  <- c("Head dimension","Head description","Caliper jaw position")
# Change to names of my local images
#df$Image = c(paste(graph_directory,'ca.png',sep=''),
#            paste(graph_directory,'Figure2b.png',sep=''),
#            paste(graph_directory,'Figure2c.png',sep=''),
#            paste(graph_directory,'Figure2d.png',sep=''),
#            paste(graph_directory,'Figure2e.png',sep=''),
#            paste(graph_directory,'Figure2f.png',sep=''))
# Add appropriate rmarkdown tagging
#df$Image <- sprintf('![](%s){width=50px}', df$Image)
kableExtra::kable(df, booktabs = TRUE,
linesep = "", format = "latex",
escape = F, # allows textsuperscript latex
caption = "(ref:Table1Caption)") %>%
kableExtra::kable_styling(font_size = 10, position = "left",latex_options = "hold_position") %>%
column_spec(1, width  = "1.9cm") %>%
column_spec(2, width  = "6.0cm") %>%
column_spec(3, width  = "7.5cm") %>%
row_spec(0, bold="true") %>%
row_spec(1,  hline_after = T) %>%
row_spec(2,  hline_after = T) %>%
row_spec(3,  hline_after = T) %>%
row_spec(4,  hline_after = T) %>%
row_spec(5,  hline_after = T)
library(knitr)
if (is_latex_output()) {
knitr_figs_dir <- "knitr-figs-pdf/"
knitr_cache_dir <- "knitr-cache-pdf/"
fig_out_type <- "png"
} else {
knitr_figs_dir <- "knitr-figs-docx/"
knitr_cache_dir <- "knitr-cache-docx/"
fig_out_type <- "png"
}
fig_asp <- 0.618
fig_width <- 9
fig_out_width <- "6in"
fig_dpi <- 180
fig_align <- "center"
fig_pos <- "htb"
opts_chunk$set(
collapse = TRUE,
warning = FALSE,
message = FALSE,
comment = "#>",
fig.path = knitr_figs_dir,
cache.path = knitr_cache_dir,
fig.asp = fig_asp,
fig.width = fig_width,
out.width = fig_out_width,
echo = FALSE,
#  autodep = TRUE,
#  cache = TRUE,
cache.comments = FALSE,
dev = fig_out_type,
dpi = fig_dpi,
fig.align = fig_align,
fig.pos = fig_pos
)
lmp <- function (modelobject) {                    #  p value function
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmslp <- function (modelobject) {                    #  slope (m) value function
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
slp <- signif(modelobject$coef[[2]], 5)
return(slp)
}
lmR <- function (modelobject) {                    #  r2 value function
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
r2 =  format(summary(modelobject)$r.squared,  digits = 3)
return(r2)
}
# y = Fork_Length, response variable
options("scipen"=100, "digits"=3)
# head measurements from research study 2016
details <-    paste("select * from Head_Measurements_Report", sep="")
# hd    <-    GetSQLData(details,"Sablefish")      # head details from SQL Server
# write.table(hd , file = paste(path,"head_measurements.csv",sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
hd      <-    read.csv(paste(path,"head_measurements.csv",sep=''), header = T)  # master data
# add other packages here:
library(dplyr) # transform and summarize tabular data
library(ggplot2)
library(readr)
library(tibble)
library(rosettafish)
library(csasdown)
yr              <-  2021
path            <-  "c:/github/sablehead/standalone/"
graph_directory <-  "c:/github/sablehead/figures/"
library(RODBC)
library(knitr)
library(magick)
library(excelR)
library(gapminder)
library(xtable)       # produces tables
library(kableExtra)   # produces html tables with scrollbars, etc
library(pacman)       # produces numbered tables and figures in order to reference them
#  if (!require("pacman")) install.packages("pacman")
#  pacman::p_load(knitr, captioner, bundesligR, stringr)
library(bookdown)
library(tableHTML)
library(Rmisc)
library(cowplot)
library(rgdal)
library(maps)
library(ggspatial)
library(png)
library(grid)
library(gridExtra)
library(stringr)
library(ggpubr)
library(here)
library(ggfortify)
library(rgdal)
#  ----   G L O B A L --- F U N C T I O N S ---------------------------------
GetSQLData <- function(strSQL,strDbName) {    # connect to SQL Server
cnn <- odbcDriverConnect(paste("Driver={SQL Server};Server=DFBCV9TWVASP001;",
"Database=",
strDbName,";
Trusted_Connection=Yes",
sep=""))
dat <- sqlQuery(cnn, strSQL)
odbcClose(cnn)
return(dat)
}
panLab <- function( x, y, txt, ... ) { # Allows text to be placed at 0<x<1, 0<y<1)
usr <- par( "usr" )
par( usr=c(0,1,0,1) )
text( x, y, txt, ... )
par( usr=usr )
#return( NULL )
}
cleanf <- function(x){                            # function to remove duplicates
oldx <- c(FALSE, x[-1]==x[-length(x)])  # is value equal to previous value
res <- x
res[oldx] <- NA
return(res)
}
simpleCap <- function(x) {  # add capital first letter to each word
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="",
collapse=" ")
}
firstup <- function(x) {   # add capital first letter to first word
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
map    <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
df[[c]] <- as.character( df[[c]])  # -- make sure values not factors
df[r, c] <- paste0(markup, df[r, c], markup)  # -- Update formatting
}
}
return(df)
}
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos    <- match.arg(pos,    c("topleft",    "top", "topright",
"left",       "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user co ordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
