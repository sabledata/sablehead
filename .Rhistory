geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(a, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
rlang::last_error()
library(dplyr)
library(ggplot2)
DNA.fisher.2022  <- read.csv(paste(path,'DNAfisher2022.csv', sep=''), header=T)
names(DNA.fisher.2022) <- c("DNAvial","fisher_sex","DNALab_sex","concordance","averageInterODistance")
DNA.fisher.2022  <-  DNA.fisher.2022[DNA.fisher.2022$DNALab_sex != 'Unknown',]
DNA.fisher.table <- DNA.fisher.2022 %>%
mutate(x = case_when(averageInterODistance >= 35 & averageInterODistance < 37 ~"35-36",
averageInterODistance >= 37 & averageInterODistance < 39~ "37-38",
averageInterODistance >= 39 & averageInterODistance < 41~ "39-40",
averageInterODistance >= 41 & averageInterODistance < 43~ "41-42",
averageInterODistance >= 43 & averageInterODistance < 45~ "43-44",
averageInterODistance >= 45 & averageInterODistance < 47~ "45-46",
averageInterODistance >= 47 & averageInterODistance < 49~ "47-48",
averageInterODistance >= 49 & averageInterODistance < 51~ "49-50",
averageInterODistance >= 51 & averageInterODistance < 53~ "51-52",
averageInterODistance >= 53 & averageInterODistance < 55~ "53-54",
averageInterODistance >= 55 & averageInterODistance < 57~ "55-56",
averageInterODistance >= 57 & averageInterODistance < 59~ "57-58",
averageInterODistance >= 59 & averageInterODistance < 61~ "59-60",
averageInterODistance >= 61 & averageInterODistance < 63~ "61-62"))
agg.dna <-  aggregate(DNA.fisher.table$DNAvial, by=list(DNA.fisher.table$x,DNA.fisher.table$concordance), FUN=length)
names(agg.dna)  <- c("x","concordance","y")
no.concord<-  agg.dna[agg.dna$concordance == 0,]
write.table(no.concord, file = paste(path,'no.concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
no.concord.file  <-  read.csv(paste(path,'no.concord.csv',sep=''),header=T)
concord<-as.data.frame(agg.dna[agg.dna$concordance == 1,])
write.table(concord, file = paste(path,'concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
concord.file  <-  read.csv(paste(path,'concord.csv',sep=''),header=T)
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(a, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(a, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()}
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)
no.concord.file$x
===
h
p<-ggplot(a, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
y
p<-ggplot(a, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
length(no.concord.file$x)
i=4
h<- no.concord.file$x[i]
h
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(no.concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (j in 1: length(concord.file$x)) {# create sparkline graphs
h<- concord.file$x[j]
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"x2fig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
library(dplyr)
library(ggplot2)
DNA.fisher.2022  <- read.csv(paste(path,'DNAfisher2022.csv', sep=''), header=T)
names(DNA.fisher.2022) <- c("DNAvial","fisher_sex","DNALab_sex","concordance","averageInterODistance")
DNA.fisher.2022  <-  DNA.fisher.2022[DNA.fisher.2022$DNALab_sex != 'Unknown',]
DNA.fisher.table <- DNA.fisher.2022 %>%
mutate(x = case_when(averageInterODistance >= 35 & averageInterODistance < 37 ~"35-36",
averageInterODistance >= 37 & averageInterODistance < 39~ "37-38",
averageInterODistance >= 39 & averageInterODistance < 41~ "39-40",
averageInterODistance >= 41 & averageInterODistance < 43~ "41-42",
averageInterODistance >= 43 & averageInterODistance < 45~ "43-44",
averageInterODistance >= 45 & averageInterODistance < 47~ "45-46",
averageInterODistance >= 47 & averageInterODistance < 49~ "47-48",
averageInterODistance >= 49 & averageInterODistance < 51~ "49-50",
averageInterODistance >= 51 & averageInterODistance < 53~ "51-52",
averageInterODistance >= 53 & averageInterODistance < 55~ "53-54",
averageInterODistance >= 55 & averageInterODistance < 57~ "55-56",
averageInterODistance >= 57 & averageInterODistance < 59~ "57-58",
averageInterODistance >= 59 & averageInterODistance < 61~ "59-60",
averageInterODistance >= 61 & averageInterODistance < 63~ "61-62"))
agg.dna <-  aggregate(DNA.fisher.table$DNAvial, by=list(DNA.fisher.table$x,DNA.fisher.table$concordance), FUN=length)
names(agg.dna)  <- c("x","concordance","y")
no.concord<-  agg.dna[agg.dna$concordance == 0,]
write.table(no.concord, file = paste(path,'no.concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
no.concord.file  <-  read.csv(paste(path,'no.concord.csv',sep=''),header=T)
concord<-as.data.frame(agg.dna[agg.dna$concordance == 1,])
write.table(concord, file = paste(path,'concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
concord.file  <-  read.csv(paste(path,'concord.csv',sep=''),header=T)
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(no.concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (j in 1: length(concord.file$x)) {# create sparkline graphs
h<- concord.file$x[j]
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"x2fig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
no.concord.file  <- no.concord.file %>%
mutate(Sparkline = paste0("\\raisebox{.12\\height}{\\includegraphics[width=2cm]{",
graph_directorygraph_directory,"xfig",no.concord.file$x,".png}}"  ) )
# add other packages here:
library(dplyr) # transform and summarize tabular data
library(ggplot2)
library(readr)
library(tibble)
library(rosettafish)
library(csasdown)
yr              <-  2021
path            <-  "c:/github/sablehead/standalone/"
graph_directory <-  "c:/github/sablehead/figures/"
library(RODBC)
library(knitr)
library(magick)
library(excelR)
library(gapminder)
library(xtable)       # produces tables
library(kableExtra)   # produces html tables with scrollbars, etc
library(pacman)       # produces numbered tables and figures in order to reference them
#  if (!require("pacman")) install.packages("pacman")
#  pacman::p_load(knitr, captioner, bundesligR, stringr)
library(bookdown)
library(tableHTML)
library(Rmisc)
library(cowplot)
library(rgdal)
library(maps)
library(ggspatial)
library(png)
library(grid)
library(gridExtra)
library(stringr)
library(ggpubr)
library(here)
library(ggfortify)
library(rgdal)
#  ----   G L O B A L --- F U N C T I O N S ---------------------------------
GetSQLData <- function(strSQL,strDbName) {    # connect to SQL Server
cnn <- odbcDriverConnect(paste("Driver={SQL Server};Server=DFBCV9TWVASP001;",
"Database=",
strDbName,";
Trusted_Connection=Yes",
sep=""))
dat <- sqlQuery(cnn, strSQL)
odbcClose(cnn)
return(dat)
}
panLab <- function( x, y, txt, ... ) { # Allows text to be placed at 0<x<1, 0<y<1)
usr <- par( "usr" )
par( usr=c(0,1,0,1) )
text( x, y, txt, ... )
par( usr=usr )
#return( NULL )
}
cleanf <- function(x){                            # function to remove duplicates
oldx <- c(FALSE, x[-1]==x[-length(x)])  # is value equal to previous value
res <- x
res[oldx] <- NA
return(res)
}
simpleCap <- function(x) {  # add capital first letter to each word
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="",
collapse=" ")
}
firstup <- function(x) {   # add capital first letter to first word
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
map    <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
df[[c]] <- as.character( df[[c]])  # -- make sure values not factors
df[r, c] <- paste0(markup, df[r, c], markup)  # -- Update formatting
}
}
return(df)
}
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos    <- match.arg(pos,    c("topleft",    "top", "topright",
"left",       "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user co ordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
library(dplyr)
library(ggplot2)
DNA.fisher.2022  <- read.csv(paste(path,'DNAfisher2022.csv', sep=''), header=T)
names(DNA.fisher.2022) <- c("DNAvial","fisher_sex","DNALab_sex","concordance","averageInterODistance")
DNA.fisher.2022  <-  DNA.fisher.2022[DNA.fisher.2022$DNALab_sex != 'Unknown',]
DNA.fisher.table <- DNA.fisher.2022 %>%
mutate(x = case_when(averageInterODistance >= 35 & averageInterODistance < 37 ~"35-36",
averageInterODistance >= 37 & averageInterODistance < 39~ "37-38",
averageInterODistance >= 39 & averageInterODistance < 41~ "39-40",
averageInterODistance >= 41 & averageInterODistance < 43~ "41-42",
averageInterODistance >= 43 & averageInterODistance < 45~ "43-44",
averageInterODistance >= 45 & averageInterODistance < 47~ "45-46",
averageInterODistance >= 47 & averageInterODistance < 49~ "47-48",
averageInterODistance >= 49 & averageInterODistance < 51~ "49-50",
averageInterODistance >= 51 & averageInterODistance < 53~ "51-52",
averageInterODistance >= 53 & averageInterODistance < 55~ "53-54",
averageInterODistance >= 55 & averageInterODistance < 57~ "55-56",
averageInterODistance >= 57 & averageInterODistance < 59~ "57-58",
averageInterODistance >= 59 & averageInterODistance < 61~ "59-60",
averageInterODistance >= 61 & averageInterODistance < 63~ "61-62"))
agg.dna <-  aggregate(DNA.fisher.table$DNAvial, by=list(DNA.fisher.table$x,DNA.fisher.table$concordance), FUN=length)
names(agg.dna)  <- c("x","concordance","y")
no.concord<-  agg.dna[agg.dna$concordance == 0,]
write.table(no.concord, file = paste(path,'no.concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
no.concord.file  <-  read.csv(paste(path,'no.concord.csv',sep=''),header=T)
concord<-as.data.frame(agg.dna[agg.dna$concordance == 1,])
write.table(concord, file = paste(path,'concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
concord.file  <-  read.csv(paste(path,'concord.csv',sep=''),header=T)
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(no.concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (j in 1: length(concord.file$x)) {# create sparkline graphs
h<- concord.file$x[j]
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"x2fig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
no.concord.file  <- no.concord.file %>%
mutate(Sparkline = paste0("\\raisebox{.12\\height}{\\includegraphics[width=2cm]{",
graph_directory,"xfig",no.concord.file$x,".png}}"  ) )
concord.file  <- concord.file%>%
mutate(Sparkline =
paste0("\\raisebox{.12\\height} {\\includegraphics[width=2cm]{",
graph_directory,"x2fig",concord.file$x,".png}}"    ) )
agg.new <- rbind(no.concord.file,concord.file)
#names(agg.new) <-  c("Head Length group", "Concordance", "Count", "Graph")
kableExtra::kable(agg.new,
escape = F,        # lets the image show up
format = "latex")
agg.new
library(dplyr)
library(ggplot2)
DNA.fisher.2022  <- read.csv(paste(path,'DNAfisher2022.csv', sep=''), header=T)
names(DNA.fisher.2022) <- c("DNAvial","fisher_sex","DNALab_sex","concordance","averageInterODistance")
DNA.fisher.2022  <-  DNA.fisher.2022[DNA.fisher.2022$DNALab_sex != 'Unknown',]
DNA.fisher.table <- DNA.fisher.2022 %>%
mutate(x = case_when(averageInterODistance >= 35 & averageInterODistance < 37 ~"35-36",
averageInterODistance >= 37 & averageInterODistance < 39~ "37-38",
averageInterODistance >= 39 & averageInterODistance < 41~ "39-40",
averageInterODistance >= 41 & averageInterODistance < 43~ "41-42",
averageInterODistance >= 43 & averageInterODistance < 45~ "43-44",
averageInterODistance >= 45 & averageInterODistance < 47~ "45-46",
averageInterODistance >= 47 & averageInterODistance < 49~ "47-48",
averageInterODistance >= 49 & averageInterODistance < 51~ "49-50",
averageInterODistance >= 51 & averageInterODistance < 53~ "51-52",
averageInterODistance >= 53 & averageInterODistance < 55~ "53-54",
averageInterODistance >= 55 & averageInterODistance < 57~ "55-56",
averageInterODistance >= 57 & averageInterODistance < 59~ "57-58",
averageInterODistance >= 59 & averageInterODistance < 61~ "59-60",
averageInterODistance >= 61 & averageInterODistance < 63~ "61-62"))
agg.dna <-  aggregate(DNA.fisher.table$DNAvial, by=list(DNA.fisher.table$x,DNA.fisher.table$concordance), FUN=length)
names(agg.dna)  <- c("x","concordance","y")
no.concord<-  agg.dna[agg.dna$concordance == 0,]
write.table(no.concord, file = paste(path,'no.concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
no.concord.file  <-  read.csv(paste(path,'no.concord.csv',sep=''),header=T)
concord<-as.data.frame(agg.dna[agg.dna$concordance == 1,])
write.table(concord, file = paste(path,'concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
concord.file  <-  read.csv(paste(path,'concord.csv',sep=''),header=T)
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(no.concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
for (j in 1: length(concord.file$x)) {# create sparkline graphs
h<- concord.file$x[j]
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"x2fig", h ,".png"),
width = 7, height = 1.9)  # mini graphs
}
no.concord.file  <- no.concord.file %>%
mutate(Sparkline = paste0("\\raisebox{.12\\height}{\\includegraphics[width=1.2cm]{",
graph_directory,"xfig",no.concord.file$x,".png}}"  ) )
concord.file  <- concord.file%>%
mutate(Sparkline =
paste0("\\raisebox{.12\\height} {\\includegraphics[width=1.2cm]{",
graph_directory,"x2fig",concord.file$x,".png}}"    ) )
agg.new <- rbind(no.concord.file,concord.file)
names(agg.new) <-  c("Head Length group", "Concordance", "Count", "Graph")
kableExtra::kable(agg.new,
booktabs = TRUE,
longtable = T,
escape = F,        # lets the image show up
linesep   = "",
align=rep('r', 4),
row.names = FALSE,   # in order to get rid of matrix counter
format = "latex")
agg.new
no.concord.file
library(dplyr)
library(ggplot2)
DNA.fisher.2022  <- read.csv(paste(path,'DNAfisher2022.csv', sep=''), header=T)
names(DNA.fisher.2022) <- c("DNAvial","fisher_sex","DNALab_sex","concordance","averageInterODistance")
DNA.fisher.2022  <-  DNA.fisher.2022[DNA.fisher.2022$DNALab_sex != 'Unknown',]
DNA.fisher.table <- DNA.fisher.2022 %>%
mutate(x = case_when(averageInterODistance >= 35 & averageInterODistance < 37 ~"35-36",
averageInterODistance >= 37 & averageInterODistance < 39~ "37-38",
averageInterODistance >= 39 & averageInterODistance < 41~ "39-40",
averageInterODistance >= 41 & averageInterODistance < 43~ "41-42",
averageInterODistance >= 43 & averageInterODistance < 45~ "43-44",
averageInterODistance >= 45 & averageInterODistance < 47~ "45-46",
averageInterODistance >= 47 & averageInterODistance < 49~ "47-48",
averageInterODistance >= 49 & averageInterODistance < 51~ "49-50",
averageInterODistance >= 51 & averageInterODistance < 53~ "51-52",
averageInterODistance >= 53 & averageInterODistance < 55~ "53-54",
averageInterODistance >= 55 & averageInterODistance < 57~ "55-56",
averageInterODistance >= 57 & averageInterODistance < 59~ "57-58",
averageInterODistance >= 59 & averageInterODistance < 61~ "59-60",
averageInterODistance >= 61 & averageInterODistance < 63~ "61-62"))
agg.dna <-  aggregate(DNA.fisher.table$DNAvial, by=list(DNA.fisher.table$x,DNA.fisher.table$concordance), FUN=length)
names(agg.dna)  <- c("x","concordance","y")
no.concord<-  agg.dna[agg.dna$concordance == 0,]
write.table(no.concord, file = paste(path,'no.concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
no.concord.file  <-  read.csv(paste(path,'no.concord.csv',sep=''),header=T)
concord<-as.data.frame(agg.dna[agg.dna$concordance == 1,])
write.table(concord, file = paste(path,'concord.csv',sep=''),row.names=FALSE, na="",col.names=TRUE,  sep=",")
concord.file  <-  read.csv(paste(path,'concord.csv',sep=''),header=T)
for (i in 1:length(no.concord.file$x)) {# create sparkline graphs
h<- no.concord.file$x[i]
p<-ggplot(no.concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(no.concord.file$x %in% c(h,no.concord.file$x[i]), "red", "yellow" ),
fill=alpha("orange", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"xfig", h ,".png"),
width = 5, height = 1.2)  # mini graphs
}
for (j in 1: length(concord.file$x)) {# create sparkline graphs
h<- concord.file$x[j]
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
ggsave(p, filename = paste0(graph_directory,"x2fig", h ,".png"),
width = 5, height = 1.2)  # mini graphs
}
no.concord.file  <- no.concord.file %>%
mutate(Sparkline = paste0("\\raisebox{.12\\height}{\\includegraphics[width=1.2cm]{",
graph_directory,"xfig",no.concord.file$x,".png}}"  ) )
concord.file  <- concord.file%>%
mutate(Sparkline =
paste0("\\raisebox{.12\\height} {\\includegraphics[width=1.2cm]{",
graph_directory,"x2fig",concord.file$x,".png}}"    ) )
#agg.new <- rbind(no.concord.file,concord.file)
#names(agg.new) <-  c("Head Length group", "Concordance", "Count", "Graph")
kableExtra::kable(no.concord.file,
booktabs = TRUE,
longtable = T,
escape = F,        # lets the image show up
linesep   = "",
align=rep('r', 4),
row.names = FALSE,   # in order to get rid of matrix counter
format = "latex")
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
p<-ggplot(concord.file, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
geom_point( size=5, color=ifelse(concord.file$x %in% c(h,concord.file$x[j]), "red", "blue" ),
fill=alpha("light blue", 0.3),
alpha=0.7, shape=21, stroke=2) + theme_bw()
p
no.concord.file  <- no.concord.file %>%
mutate(Sparkline = paste0("\\raisebox{.12\\height}{\\includegraphics[width=1.2cm]{",
graph_directory,"xfig",no.concord.file$x,".png}}"  ) )
no.concord.file
